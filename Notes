1. Create Project with CLI :

   dotnet new sln
   dotnet new webapi -n API
   dotnet new classlib -n Application
   dotnet new classlib -n Domain
   dotnet new classlib -n Persistence
   dotnet new classlib -n Infrastructure

   dotnet sln add API/API.csproj
   dotnet sln add Application/Application.csproj
   dotnet sln add Domain/Domain.csproj
   dotnet sln add Persistence/Persistence.csproj
   dotnet sln add Infrastructure/Infrastructure.csproj

   cd API
   dotnet add reference ../Application/Application.csproj
   dotnet add reference ../Infrastructure/Infrastructure.csproj
   cd ../Application
   dotnet add reference ../Domain/Domain.csproj
   dotnet add reference ../Persistence/Persistence.csproj
   cd ../Persistence
   dotnet add reference ../Domain/Domain.csproj
   cd ../Infrastructure
   dotnet add reference ../Application/Application.csproj
   cd ..

   dotnet restore

2. Configure the local environment in the LaunchSettings.json
   "launchBrowser": false,
   "applicationUrl": "http://localhost:5000",

3. Configur Program.cs
   remove https middleware

4. Create an Entity Class in Domain Project
5. Install EntityFrameworkCore.Sqlite from Nuget in Persistence Project
6. Create an DataContext Class in Persistence Project
7. Add a connection string to the appsettings.Development.json
8. Configure Program.cs
   add dbContext and connectionString
9. Install dotnet EntityFramework tool
   dotnet tool install --global dotnet-ef
10. Do Database Migration
    install Microsoft.EntityFrameworkCore.Design from Nuget in API Project
    dotnet ef migrations add InitialCreate -s API -p Persistence
11. Configure Program.cs
    add automatic migrations above app.Run();
12. Create Seed Class in Persistence Project
13. Configure Program.cs
    Call the static method on the seed class after the database migration code
14. Create a BaseApiController class in the Controllers folder of the API project
15. Create a CategoriesController class in the Controllers folder of the API project that inherits from the BaseApiController class
16. Install MediatR.Extensions.Microsoft.DependencyInjection into Application Project
17. Create a List class in the Categories folder of the Application Project
18. Create Query and Handler class inside List class
19. Configure Program.cs
    add MediatR middleware
20. Configure List Method on CategoriesController
    use Mediator method to get List
21. Create a Details class in the Categories folder of the Application Project
22. Configure Details Method on CategoriesController
    use Mediator method to get Details
23. Create a Create class ini the Categories folder of the Application Project
24. Create Command and Handler class inside Edit class
25. Create Method EditCategory on CategoriesController
26. Install AutoMapper.Extensions.Microsoft.DependencyInjection into Application Project
27. Create Folder Core in Application Project
28. Create MappingProfiles Class in Core folder of Application Project
29. Create a Edit class in the Categories folder of the Application Project
30. Create Command and Handler class inside Edit class
31. Create Method EditCategory on CategoriesController
32. Create Extensions on API Project
33. Create ApplicationServiceExtensions in Extensions folder of API Project
34. Configure Program.cs
    call ApplicationServiceExtensions static method
35. Install FluentValidation.AspNetCore into Application Project
36. Create a CategoryValidator class in the Categories folder of the Applicatoin Project
37. Add CommandValidator class inside Create and Edit class
38. Configure ApplicationServiceExtensions class
    add FluentValidatior middleware
39. Create a Result class in Core folder of Application Project
40. add HandleResult method in BaseApiController in Controllers of API Project
41. Call HandleResult method in every Controller in CategoriesController
42. Call Result static method in CRUD Class in Category folder in Application Project
43. Create AppException class in Core folder of Application Project
44. Create Middleware folder in API Project
45. Create ExceptionMiddleware class
46. Configure Program.cs
    add ExceptionMiddleware middleware
47. Create a AppUser class in The Domain folder
48. install Microsoft.AspNetCore.Identity.EntityFrameworkCore from Nuget in Domain Project
49. Change DataContext : Identity to DataContext :DataContext : IdentityDbContext<AppUser> in DataContext class in The Persistence folder
50. Do Database Migration for Identity User
    dotnet ef migrations add IdentityAdded -p Persistence -s API
51. Create IdentityServiceExtentions in Extensions folder of API Project
52. Configure Program.cs
    call IdentityServiceExtentions static method
53. Add Seed Users to Seed class in the Persistence Class
54. Create a DTOs folder in the API folder
55. Create LoginDto in the DTOs folder
56. Create RegisterDto in the DTOs folder
57. Create UsersDto in the DTO folder
58. Create a AccountController class in the Controllers folder of the API project that inherits from the ControllerBase class
59. Create a Services folder in the API folder
60. Configure appsetting.json
    add TokenKey
61. Install System.IdentityModel.Tokens.Jwt from Nuget in API Project
62. Create TokenService class in Services folder
63. Configure IdentityServiceExtentions in Extentions folder
    add services.AddScoped<TokenService>();
64. Install Microsoft.AspNetCore.Authentication.JwtBearer from Nuget in API Project
65. Configure IdentityServiceExtentions in Extentions folder
    add services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme) ...
66. Configur Program.cs
    add app.UseAuthentication(); before app.UseAuthorization();
    add AuthorizationPolicyBuilder to AddControllers
67. Create a Transaction class in Domain folder for many to many
68. Configure AppUser class in Domain folder
69. Configure SubCategory class in Domain folder
70. Configure DataContext class in Persistence folder
    add DbSet<Transaction> Transactions
    create overriding method OnModelCreating
71. Do Database Migration for Transaction
    dotnet ef migrations add Transaction -s API -p Persistence
72. Create Folder Interfaces in Application Folder
73. Create IUserAccessor interface in Interfaces folder
74. Create Folder Security in Infrastructure folder
75. Create UserAccessor class in Security Folder
76. Configure ApplicationServiceExtensions.cs in Application
    services.AddHttpContextAccessor();
    services.AddScoped<IUserAccessor, UserAccessor>();
77. Create TransactionDto class in Transactions folder
78. Create SubCategoryDto class in SubCategory folder
79. Create AppUserDto class in AppUser folder
80. Configure MappingProfiles in Core folder
81. Create List class in Transactions folder
82. Create Delete class in Transactions folder
83. Create Create class in Transactions folder
84. Create TransactionsControlleere class in Controllers folder
